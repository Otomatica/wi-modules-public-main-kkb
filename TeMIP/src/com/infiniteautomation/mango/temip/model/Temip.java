/*
 * This file is generated by jOOQ.
 */
package com.infiniteautomation.mango.temip.model;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.OrderField;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Temip extends TableImpl<TemipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>temip</code>
     */
    public static final Temip TEMIP = new Temip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemipRecord> getRecordType() {
        return TemipRecord.class;
    }

    /**
     * The column <code>temip.id</code>.
     */
    public final TableField<TemipRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>temip.eventDetectorId</code>.
     */
    public final TableField<TemipRecord, Integer> eventDetectorId = createField(DSL.name("eventDetectorId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>temip.priority</code>.
     */
    public final TableField<TemipRecord, Integer> priority = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>temip.alarmState</code>.
     */
    public final TableField<TemipRecord, Integer> alarmState = createField(DSL.name("alarmState"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>temip.source</code>.
     */
    public final TableField<TemipRecord, String> source = createField(DSL.name("source"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>temip.category</code>.
     */
    public final TableField<TemipRecord, String> category = createField(DSL.name("category"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>temip.alarmText</code>.
     */
    public final TableField<TemipRecord, String> alarmText = createField(DSL.name("alarmText"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>temip.timestamp</code>.
     */
    public final TableField<TemipRecord, String> timestamp = createField(DSL.name("timestamp"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>temip.address</code>.
     */
    public final TableField<TemipRecord, String> address = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>temip.port</code>.
     */
    public final TableField<TemipRecord, Integer> port = createField(DSL.name("port"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>temip.trapStatus</code>.
     */
    public final TableField<TemipRecord, String> trapStatus = createField(DSL.name("trapStatus"), SQLDataType.VARCHAR(10), this, "");

    private Temip(Name alias, Table<TemipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Temip(Name alias, Table<TemipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>temip</code> table reference
     */
    public Temip(String alias) {
        this(DSL.name(alias), TEMIP);
    }

    /**
     * Create an aliased <code>temip</code> table reference
     */
    public Temip(Name alias) {
        this(alias, TEMIP);
    }

    /**
     * Create a <code>temip</code> table reference
     */
    public Temip() {
        this(DSL.name("temip"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
            Internal.createIndex(DSL.name("alarmState"), Temip.TEMIP, new OrderField[] { Temip.TEMIP.alarmState }, false)
        );
    }

    @Override
    public Identity<TemipRecord, Integer> getIdentity() {
        return (Identity<TemipRecord, Integer>) super.getIdentity();
    }

    @Override
    public Temip as(String alias) {
        return new Temip(DSL.name(alias), this);
    }

    @Override
    public Temip as(Name alias) {
        return new Temip(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Temip rename(String name) {
        return new Temip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Temip rename(Name name) {
        return new Temip(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, Integer, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
